{
  "enabled": true,
  "name": "Comprehensive App Analyzer",
  "description": "Performs complete application analysis including tests, code quality, integration status, and generates detailed status report",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "**/*"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are the comprehensive application analyzer for the README-to-CICD system. Your task is to perform a complete health check of the entire application and generate a detailed status report.\n\n**ANALYSIS SCOPE:**\n\n## 1. CODE COMPILATION & BUILD STATUS\n- Run TypeScript compilation: `npx tsc --noEmit`\n- Check build process: `npm run build`\n- Validate package dependencies: `npm audit`\n- Check for missing dependencies\n\n## 2. COMPREHENSIVE TEST ANALYSIS\n- Run all test suites: `npm test`\n- Run integration tests: `npm run test:integration` (if available)\n- Run unit tests with coverage: `npm test -- --coverage`\n- Analyze test failure patterns and root causes\n- Check test coverage percentages\n\n## 3. COMPONENT STATUS EVALUATION\nAnalyze each of the 7 core components:\n\n### A. README Parser (`src/parser/`)\n- File structure completeness\n- Interface implementations\n- Test coverage\n- Integration readiness\n\n### B. Framework Detection (`src/detection/`)\n- Detection algorithms\n- Framework support coverage\n- Confidence scoring accuracy\n- Test scenarios\n\n### C. YAML Generator (`src/generator/`)\n- Template system functionality\n- Workflow generation accuracy\n- Template compilation status\n- Output validation\n\n### D. CLI Tool (`src/cli/`)\n- Command structure\n- Error handling\n- User experience\n- Integration with core components\n\n### E. Shared Utilities (`src/shared/`)\n- Common interfaces\n- Utility functions\n- Type definitions\n- Cross-component compatibility\n\n### F. Validation System (`src/validation/`)\n- Interface validation\n- Integration checks\n- Error reporting\n- System diagnostics\n\n### G. Future Extensions (VSCode, Agent Hooks, Deployment)\n- Planned architecture\n- Interface definitions\n- Implementation readiness\n\n## 4. INTEGRATION PIPELINE ANALYSIS\n- End-to-end data flow testing\n- Component interface compatibility\n- Error propagation handling\n- Performance characteristics\n\n## 5. CODE QUALITY ASSESSMENT\n- ESLint analysis: `npm run lint`\n- Code formatting: `npm run format -- --check`\n- TypeScript strict mode compliance\n- Security vulnerability scan\n\n## 6. PERFORMANCE & RELIABILITY\n- Memory usage patterns\n- Processing speed benchmarks\n- Error recovery mechanisms\n- Resource utilization\n\n## 7. DOCUMENTATION & SPECS STATUS\n- Spec completeness in `.kiro/specs/`\n- README accuracy\n- API documentation\n- Usage examples\n\n**EXECUTION COMMANDS:**\n```bash\n# Build and compilation\nnpx tsc --noEmit\nnpm run build\nnpm audit\n\n# Testing\nnpm test\nnpm test -- --coverage\nnpm run validate:integration\nnpm run validate:interfaces\n\n# Code quality\nnpm run lint\nnpm run format -- --check\nnpm run type-check\n\n# Performance\nnpm run test:performance\nnpm run validate:memory\n```\n\n**REPORT GENERATION:**\nCreate a comprehensive markdown report named `COMPREHENSIVE_APP_STATUS_REPORT.md` with:\n\n### Executive Summary\n- Overall system health score (0-100)\n- Critical issues requiring immediate attention\n- System readiness assessment\n- Deployment readiness status\n\n### Detailed Component Analysis\nFor each component:\n- ‚úÖ **Completed Features**\n- üöß **In Progress Items**\n- ‚ùå **Broken/Missing Features**\n- üîß **Required Fixes**\n- üìä **Metrics** (test coverage, performance, etc.)\n\n### Integration Status Matrix\n- Component-to-component compatibility\n- Data flow validation results\n- Interface matching status\n- Error handling coverage\n\n### Test Results Summary\n- Total tests: X passed, Y failed, Z skipped\n- Coverage percentages by component\n- Critical test failures with root cause analysis\n- Performance test results\n\n### Code Quality Metrics\n- TypeScript compliance score\n- Linting issues count and severity\n- Security vulnerabilities\n- Technical debt assessment\n\n### Priority Action Items\n1. **Critical (Fix Immediately)**\n2. **High Priority (Fix This Week)**\n3. **Medium Priority (Fix This Sprint)**\n4. **Low Priority (Future Enhancement)**\n\n### Recommendations\n- Architecture improvements\n- Performance optimizations\n- Testing strategy enhancements\n- Development workflow improvements\n\n### Next Steps\n- Immediate actions required\n- Development roadmap priorities\n- Resource allocation suggestions\n- Timeline estimates\n\n**ANALYSIS DEPTH:**\n- Be thorough but concise\n- Focus on actionable insights\n- Provide specific file/line references for issues\n- Include metrics and quantitative assessments\n- Prioritize issues by business impact\n- Consider both current state and future scalability\n\n**OUTPUT FORMAT:**\nGenerate the report as a well-structured markdown file with:\n- Clear headings and sections\n- Emoji indicators for status\n- Code blocks for commands/examples\n- Tables for metrics and comparisons\n- Actionable recommendations with specific steps\n\nExecute this comprehensive analysis now and provide the detailed status report."
  }
}