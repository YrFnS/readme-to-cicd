apiVersion: v1
kind: Namespace
metadata:
  name: readme-to-cicd
  labels:
    app: readme-to-cicd
    environment: production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: readme-to-cicd-app
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: application
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: readme-to-cicd
      component: application
  template:
    metadata:
      labels:
        app: readme-to-cicd
        component: application
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: readme-to-cicd-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: app
        image: readme-to-cicd:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: LOG_LEVEL
          value: "info"
        - name: ENABLE_METRICS
          value: "true"
        - name: ENABLE_TRACING
          value: "true"
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: readme-to-cicd-config
      - name: ssl-certs
        secret:
          secretName: ssl-certificates
---
apiVersion: v1
kind: Service
metadata:
  name: readme-to-cicd-service
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: application
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: readme-to-cicd
    component: application
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: readme-to-cicd-app
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: application
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: readme-to-cicd
  name: readme-to-cicd-app
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: readme-to-cicd-app
  namespace: readme-to-cicd
subjects:
- kind: ServiceAccount
  name: readme-to-cicd-app
  namespace: readme-to-cicd
roleRef:
  kind: Role
  name: readme-to-cicd-app
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: readme-to-cicd-config
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: configuration
data:
  app.yaml: |
    server:
      port: 8080
      host: "0.0.0.0"
    
    logging:
      level: info
      format: json
      structured: true
    
    metrics:
      enabled: true
      port: 9090
      path: /metrics
    
    tracing:
      enabled: true
      samplingRate: 0.1
    
    cache:
      ttl: 300
      maxSize: 1000
    
    rateLimit:
      enabled: true
      requestsPerMinute: 1000
      burst: 100
    
    circuitBreaker:
      enabled: true
      failureThreshold: 5
      timeout: 60000
      resetTimeout: 30000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: readme-to-cicd-hpa
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: readme-to-cicd-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: readme-to-cicd-ingress
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - readme-to-cicd.example.com
    secretName: readme-to-cicd-tls
  rules:
  - host: readme-to-cicd.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: readme-to-cicd-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: readme-to-cicd-network-policy
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: security
spec:
  podSelector:
    matchLabels:
      app: readme-to-cicd
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: readme-to-cicd-pdb
  namespace: readme-to-cicd
  labels:
    app: readme-to-cicd
    component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: readme-to-cicd
      component: application