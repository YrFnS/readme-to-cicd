name: AWS Container Deployment
type: cd

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

concurrency:
  group: aws-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: {{awsRegion}}
  ECR_REPOSITORY: {{imageName}}
  ECS_SERVICE: {{imageName}}-service
  ECS_CLUSTER: {{imageName}}-cluster
  ECS_TASK_DEFINITION: {{imageName}}-task

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: {{dockerfilePath}}
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image URI output
        run: |
          echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: {{#if (ne securityLevel 'basic')}}true{{else}}false{{/if}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Scan image with ECR
        run: |
          aws ecr start-image-scan --repository-name ${{ env.ECR_REPOSITORY }} --image-id imageTag=${{ github.sha }}
          
          # Wait for scan to complete
          aws ecr wait image-scan-complete --repository-name ${{ env.ECR_REPOSITORY }} --image-id imageTag=${{ github.sha }}
          
          # Get scan results
          aws ecr describe-image-scan-findings --repository-name ${{ env.ECR_REPOSITORY }} --image-id imageTag=${{ github.sha }}

  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && needs.build-and-push.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECR_REPOSITORY }}
          image: ${{ needs.build-and-push.outputs.image-uri }}

      - name: Deploy to ECS service
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      {{#if enableHealthChecks}}
      - name: Health check
        run: |
          echo "Performing health check..."
          # Get service URL from ECS service
          SERVICE_ARN=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].serviceArn' --output text)
          echo "Service deployed: $SERVICE_ARN"
          
          # Add health check logic here
          # curl -f $SERVICE_URL{{healthCheckUrl}} || exit 1
      {{/if}}

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… AWS ECS Deployment successful!"
          echo "Image: ${{ needs.build-and-push.outputs.image-uri }}"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"