name: Container Deployment
type: cd

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  deployments: write

concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: {{registryUrl}}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: {{registryUrl}}/{{imageName}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{imageTag}}-
            type=raw,value=latest,enable={{#if (eq github.ref 'refs/heads/main')}}true{{else}}false{{/if}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: {{dockerfilePath}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          {{#if platforms}}
          platforms: {{platforms}}
          {{/if}}

      - name: Generate SBOM
        if: {{#if (eq securityLevel 'enterprise')}}true{{else}}false{{/if}}
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: {{#if (eq securityLevel 'enterprise')}}true{{else}}false{{/if}}
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: {{#if (ne securityLevel 'basic')}}true{{else}}false{{/if}}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  deploy:
    name: Deploy Container
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && needs.build-and-push.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying container image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add your deployment commands here
          echo "url=https://your-app.example.com" >> $GITHUB_OUTPUT

      {{#if enableHealthChecks}}
      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check logic here
          # curl -f {{healthCheckUrl}} || exit 1
      {{/if}}

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Deployment successful!"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "URL: ${{ steps.deploy.outputs.url }}"