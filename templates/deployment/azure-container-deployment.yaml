name: Azure Container Deployment
type: cd

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

concurrency:
  group: azure-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  AZURE_LOCATION: {{azureLocation}}
  REGISTRY_NAME: {{imageName}}registry
  IMAGE_NAME: {{imageName}}
  CONTAINER_APP_NAME: {{imageName}}-app
  RESOURCE_GROUP: {{imageName}}-rg
  CONTAINER_APP_ENVIRONMENT: {{imageName}}-env

jobs:
  build-and-push:
    name: Build and Push to ACR
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: {{dockerfilePath}}
          push: true
          tags: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image URI output
        run: |
          echo "image-uri=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: {{#if (ne securityLevel 'basic')}}true{{else}}false{{/if}}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-uri }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  deploy-to-container-apps:
    name: Deploy to Container Apps
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && needs.build-and-push.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps
        id: deploy
        run: |
          # Update container app with new image
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ needs.build-and-push.outputs.image-uri }}
          
          # Get the application URL
          APP_URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          echo "url=https://$APP_URL" >> $GITHUB_OUTPUT

      {{#if enableHealthChecks}}
      - name: Health check
        run: |
          echo "Performing health check..."
          APP_URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          curl -f "https://$APP_URL{{healthCheckUrl}}" || exit 1
      {{/if}}

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Azure Container Apps Deployment successful!"
          echo "Image: ${{ needs.build-and-push.outputs.image-uri }}"
          echo "App: ${{ env.CONTAINER_APP_NAME }}"
          echo "URL: ${{ steps.deploy.outputs.url }}"